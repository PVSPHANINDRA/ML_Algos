# -*- coding: utf-8 -*-
"""Handwritten.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dDlJeA6BtXnQvqtBklG7VeVBFPG4UqKb
"""

import pandas as pd
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
import numpy as np
import math
from sklearn.preprocessing import OneHotEncoder

from sklearn import datasets
import matplotlib.pyplot as plt

digits = datasets.load_digits(return_X_y = True)
digits_dataset_X = digits[0]
digits_dataset_y = digits[1]
N = len(digits_dataset_X)
digit_to_show = np.random.choice(range(N), 1)[0]
print("Attributes :", digits_dataset_X[digit_to_show])
print("Class :", digits_dataset_y[digit_to_show])

plt.imshow(np.reshape(digits_dataset_X[digit_to_show], (8,8)))
plt.show()

from sklearn import datasets
from sys import argv as args
#from randomForest import execute as rf_execute
#from decisionTree import execute as dt_execute
from nn import execute as nn_execute, plot_J

digits = datasets.load_digits(return_X_y=True)
digits_dataset_X = digits[0]
digits_dataset_y = digits[1]
N = len(digits_dataset_X)

instances = []
for _index in range(N):
    x = digits_dataset_X[_index].tolist()
    y = digits_dataset_y[_index]
    x.append(y)
    instances.append(x)

class_index = 64
num_attr = [i for i in range(0, 64)]

print(instances[0])
print('instances count: ', len(instances))

# if len(args) != 2:
#     print('Please file path for dataset and pass criterion : gini or ig')
# else:
#     criterion = args[1]
#     if criterion != 'gini' and criterion != 'ig':
#         print('Please pass criterion : gini or ig')
# rf_execute('handwritten words', instances, class_index, num_attr, 'ig')
# dt_execute('handwritten words', instances, class_index, num_attr, 'ig')


hidden_layer = [25, 20]
_lambda = 0
alpha = 2
max_itr = 500

# instances - 1797
acc, f1_score, reg_costs, err_costs, itr = nn_execute("Handwritten words", instances, class_index, num_attr, hidden_layer,
                                                      _lambda, alpha, max_itr)
# print(acc)
# print(err_costs)

#plot_J(instances, class_index, num_attr,hidden_layer,_lambda, alpha, max_itr)